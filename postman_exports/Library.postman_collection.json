{
	"info": {
		"_postman_id": "721c95f3-973c-44ac-a2df-6f2e7d55e0f1",
		"name": "Library",
		"description": "<img src=\"https://content.pstmn.io/af6a5ed3-6396-4296-9fb4-a3646fbc0f00/aW1hZ2UucG5n\" width=\"457\" height=\"292\">\n\n> **This collection provides a complete set of requests to interact with the API system, which manages books, households, users, and wishlists.**",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28484444"
	},
	"item": [
		{
			"name": "Books",
			"item": [
				{
					"name": "Create a new book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isbn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"releaseDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var bookTitle = pm.collectionVariables.get('title');\r",
									"var bookAuthor = pm.collectionVariables.get('author');\r",
									"var bookISBN = pm.collectionVariables.get('isbn');\r",
									"var bookReleaseDate = pm.collectionVariables.get('releaseDate');\r",
									"\r",
									"//Check the value of book title is correct\r",
									"pm.test(\"Check the book title is correct\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(bookTitle);\r",
									"});\r",
									"\r",
									"//Check the value of book author is correct\r",
									"pm.test(\"Check the book author is correct\", function () {\r",
									"    pm.expect(jsonData.author).to.eql(bookAuthor);\r",
									"});\r",
									"\r",
									"//Check the value of book ISBN is correct\r",
									"pm.test(\"Check the book ISBN is correct\", function () {\r",
									"    pm.expect(jsonData.isbn).to.eql(bookISBN);\r",
									"});\r",
									"\r",
									"//Check the value of book release date is correct\r",
									"pm.test(\"Check the book release date is correct\", function () {\r",
									"    pm.expect(jsonData.releaseDate).to.eql(bookReleaseDate);\r",
									"});\r",
									"\r",
									"//Setting the value of book id to a collection variable\r",
									"pm.collectionVariables.set('bookId', jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating Book Title\r",
									"function generateBookTitle() {\r",
									"  const adjectives = [\"Hidden\", \"Lost\", \"Mysterious\", \"Brave\", \"Silent\", \"Shattered\", \"Whispering\"];\r",
									"  const subjects = [\"Journey\", \"Secret\", \"Legend\", \"Dream\", \"Memory\", \"Promise\", \"Shadow\"];\r",
									"  const themes = [\"of the Night\", \"in the Storm\", \"Beyond the Stars\", \"Under the Moon\", \"from the Past\", \"Within the Flames\", \"Across the Sea\"];\r",
									"\r",
									"  const adj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"  const subj = subjects[Math.floor(Math.random() * subjects.length)];\r",
									"  const theme = themes[Math.floor(Math.random() * themes.length)];\r",
									"\r",
									"  const year = Math.floor(Math.random() * (2025 - 1900 + 1)) + 1900;\r",
									"\r",
									"  return `${adj} ${subj} ${theme} (${year})`;\r",
									"}\r",
									"pm.collectionVariables.set('title',generateBookTitle());\r",
									"\r",
									"//Generating Author Name\r",
									"function generateAuthorName() {\r",
									"  const firstNames = [\"Abdelrahma\", \"James\", \"Lina\", \"Omar\", \"Sophie\", \"Raj\", \"Fatima\", \"Marco\", \"Yuki\"];\r",
									"  const lastNames = [\"Fahmy\", \"Morgan\", \"Chen\", \"Patel\", \"Hassan\", \"Rossi\", \"Brown\", \"Tanaka\", \"Khalil\"];\r",
									"\r",
									"  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"\r",
									"  return `${firstName} ${lastName}`;\r",
									"}\r",
									"pm.collectionVariables.set('author',generateAuthorName());\r",
									"\r",
									"//Generating ISBN Number\r",
									"function generateIsbnNumber() {\r",
									"  return (Math.floor(Math.random() * 1000000) + 1).toString();\r",
									"}\r",
									"pm.collectionVariables.set('isbn',generateIsbnNumber());\r",
									"\r",
									"//Generating Release Date\r",
									"function generateReleaseDate() {\r",
									"  const startDate = new Date(1900, 0, 1); // January 1, 1900\r",
									"  const endDate = new Date(2025, 4, 5); // May 5, 2025\r",
									"\r",
									"  // Generate a random timestamp between the start and end date\r",
									"  const randomTimestamp = startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime());\r",
									"\r",
									"  // Convert the random timestamp back to a date\r",
									"  const randomDate = new Date(randomTimestamp);\r",
									"\r",
									"  // Format the date as dd-mm-yyyy\r",
									"  const day = String(randomDate.getDate()).padStart(2, '0');\r",
									"  const month = String(randomDate.getMonth() + 1).padStart(2, '0');\r",
									"  const year = randomDate.getFullYear();\r",
									"\r",
									"  return `${day}-${month}-${year}`;\r",
									"}\r",
									"pm.collectionVariables.set('releaseDate',generateReleaseDate());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"author\": \"{{author}}\",\r\n    \"isbn\": \"{{isbn}}\",\r\n    \"releaseDate\": \"{{releaseDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						},
						"description": "This endpoint allows you to add a new book to the system.\n\n**Request**\n\nMethod: `POST`\n\nURL: `http://localhost:3000/books`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `title` (string, required): The title of the book.\n    \n- `author` (string, required): The author of the book.\n    \n- `isbn` (string, required): The ISBN number of the book.\n    \n- `releaseDate` (string, required): The release date of the book.\n    \n\n**Response**\n\nUpon successful creation, the response will include the details of the newly added book, including its title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Create a new book",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Mysterious Secret of the Night (1959)\",\r\n    \"author\": \"Omar Rossi\",\r\n    \"isbn\": \"35775\",\r\n    \"releaseDate\": \"24-09-2008\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "228"
								},
								{
									"key": "ETag",
									"value": "W/\"e4-iRxHco/jVCH7fM5A8SNmFaTIPcM\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 15:46:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Mysterious Secret of the Night (1959)\",\n    \"author\": \"Omar Rossi\",\n    \"isbn\": \"35775\",\n    \"releaseDate\": \"24-09-2008\",\n    \"createdAt\": \"2025-05-08T15:46:25.142Z\",\n    \"updatedAt\": \"2025-05-08T15:46:25.144Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "Retrieve all books",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var bookTitle = pm.collectionVariables.get('title');\r",
									"var bookAuthor = pm.collectionVariables.get('author');\r",
									"var bookISBN = pm.collectionVariables.get('isbn');\r",
									"var bookReleaseDate = pm.collectionVariables.get('releaseDate');\r",
									"var bookId = pm.collectionVariables.get('bookId');\r",
									"\r",
									"//Finding the added book between the books.\r",
									"const book = jsonData.find(b => b.id === bookId)\r",
									"\r",
									"//Checking the schema of the book.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isbn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"releaseDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"id\"]\r",
									"  };\r",
									"  pm.expect(book).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Check the value of book title is correct\r",
									"pm.test(\"Check the book title is correct\", function () {\r",
									"    pm.expect(book.title).to.eql(bookTitle);\r",
									"});\r",
									"\r",
									"//Check the value of book author is correct\r",
									"pm.test(\"Check the book author is correct\", function () {\r",
									"    pm.expect(book.author).to.eql(bookAuthor);\r",
									"});\r",
									"\r",
									"//Check the value of book ISBN is correct\r",
									"pm.test(\"Check the book ISBN is correct\", function () {\r",
									"    pm.expect(book.isbn).to.eql(bookISBN);\r",
									"});\r",
									"\r",
									"//Check the value of book release date is correct\r",
									"pm.test(\"Check the book release date is correct\", function () {\r",
									"    pm.expect(book.releaseDate).to.eql(bookReleaseDate);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						},
						"description": "This endpoint allows you to retrieve a list of all books in the system.\n\n**Request**\n\nMethod: `GET`\n\nURL: `http://localhost:3000/books`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include an array of all books, with their details such as title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Retrieve all books",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"390c-CFWLPuBgXgj9BWyu6Js83Y+Xw6w\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 15:54:05 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"id\": 1,\n        \"title\": \"Don't Waste Your Life\",\n        \"author\": \"John Piper\",\n        \"publicationDate\": \"2003-04-16T00:00:00.000Z\",\n        \"isbn\": \"1593281056\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"id\": 2,\n        \"title\": \"Van Til's Apologetic\",\n        \"author\": \"Greg Bahnsen\",\n        \"publicationDate\": \"1998-06-01T00:00:00.000Z\",\n        \"isbn\": \"0875520987\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"id\": 3,\n        \"title\": \"Lectures to My Students\",\n        \"author\": \"Charles Spurgeon\",\n        \"publicationDate\": \"2010-04-15T00:00:00.000Z\",\n        \"isbn\": \"1598565176\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"id\": 4,\n        \"title\": \"The Screwtape Letters\",\n        \"author\": \"C. S. Lewis\",\n        \"publicationDate\": \"2015-03-21T00:00:00.000Z\",\n        \"isbn\": \"0060652934\",\n        \"createdAt\": \"2020-03-27T00:00:00.000Z\",\n        \"updatedAt\": \"2020-03-27T00:00:00.000Z\"\n    },\n    {\n        \"title\": \"You Are What You Love: The Spiritual Power of Habit\",\n        \"author\": \"James K.A. Smith\",\n        \"isbn\": \"158743380X\",\n        \"releaseDate\": \"2016-03-05\",\n        \"createdAt\": \"2021-06-22T22:15:41.821Z\",\n        \"updatedAt\": \"2021-06-22T22:15:41.821Z\",\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/5\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:44:37.598Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.598Z\",\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/6\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:44:37.624Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.624Z\",\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/7\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:44:37.643Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.643Z\",\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/8\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:44:37.660Z\",\n        \"updatedAt\": \"2021-06-27T19:44:37.660Z\",\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/9\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:44:48.343Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.343Z\",\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/10\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:44:48.362Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.362Z\",\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/11\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:44:48.382Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.382Z\",\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/12\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:44:48.402Z\",\n        \"updatedAt\": \"2021-06-27T19:44:48.402Z\",\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/13\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:53:22.817Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.817Z\",\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/14\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:53:22.845Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.845Z\",\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/15\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:53:22.866Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.866Z\",\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/16\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:22.887Z\",\n        \"updatedAt\": \"2021-06-27T19:53:22.887Z\",\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/17\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Satchel: The Life and Times of an American Legend\",\n        \"author\": \"Larry Tye\",\n        \"isbn\": \"0812977971\",\n        \"publicationDate\": \"2010-05-04\",\n        \"createdAt\": \"2021-06-27T19:53:44.501Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.501Z\",\n        \"id\": 18,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/18\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Writing To Learn\",\n        \"author\": \"William Zinsser\",\n        \"isbn\": \"0062720406\",\n        \"publicationDate\": \"1993-06-04\",\n        \"createdAt\": \"2021-06-27T19:53:44.527Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.527Z\",\n        \"id\": 19,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/19\"\n            }\n        ]\n    },\n    {\n        \"title\": \"John Calvin: A Pilgrim's Life\",\n        \"author\": \"Herman J. Selderhuis\",\n        \"isbn\": \"0830829210\",\n        \"publicationDate\": \"2009-02-21\",\n        \"createdAt\": \"2021-06-27T19:53:44.543Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.543Z\",\n        \"id\": 20,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/20\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.563Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.563Z\",\n        \"id\": 21,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/21\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.584Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.584Z\",\n        \"id\": 22,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/22\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.602Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.602Z\",\n        \"id\": 23,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/23\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.620Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.620Z\",\n        \"id\": 24,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/24\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.644Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.644Z\",\n        \"id\": 25,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/25\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104523\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.664Z\",\n        \"updatedAt\": \"2021-06-27T19:53:44.664Z\",\n        \"id\": 26,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/26\"\n            }\n        ]\n    },\n    {\n        \"title\": \"The Brazilian Jiu Jitsu Globe Trotter\",\n        \"author\": \"Christian Gaugart\",\n        \"isbn\": \"1479104524\",\n        \"publicationDate\": \"2012-11-13\",\n        \"createdAt\": \"2021-06-27T19:53:44.686Z\",\n        \"updatedAt\": \"2025-03-31T00:50:12.307Z\",\n        \"id\": 27,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/books/27\"\n            }\n        ]\n    },\n    {\n        \"title\": \"Book Test\",\n        \"author\": \"Abdoo\",\n        \"isbn\": \"11561\",\n        \"releaseDate\": \"5-5-2005\",\n        \"createdAt\": \"2025-05-05T18:49:37.244Z\",\n        \"updatedAt\": \"2025-05-05T18:49:37.244Z\",\n        \"id\": 28\n    },\n    {\n        \"title\": \"fgg\",\n        \"author\": \"gg\",\n        \"isbn\": \"11568\",\n        \"releaseDate\": \"5-5-2005\",\n        \"createdAt\": \"2025-05-05T18:57:26.458Z\",\n        \"updatedAt\": \"2025-05-05T18:57:26.458Z\",\n        \"id\": 29\n    },\n    {\n        \"title\": \"Book Title20\",\n        \"author\": \"Author1\",\n        \"isbn\": \"50\",\n        \"releaseDate\": \"2-2-2002\",\n        \"createdAt\": \"2025-05-05T18:58:26.347Z\",\n        \"updatedAt\": \"2025-05-05T18:58:26.347Z\",\n        \"id\": 30\n    },\n    {\n        \"title\": \"Brave Legend Beyond the Stars (2021)\",\n        \"author\": \"Fatima Tanaka\",\n        \"isbn\": \"787959\",\n        \"releaseDate\": \"08-09-2013\",\n        \"createdAt\": \"2025-05-05T19:17:36.076Z\",\n        \"updatedAt\": \"2025-05-05T19:17:36.076Z\",\n        \"id\": 31\n    },\n    {\n        \"title\": \"Shattered Memory in the Storm (2022)\",\n        \"author\": \"Fatima Hassan\",\n        \"isbn\": \"294166\",\n        \"releaseDate\": \"03-02-1930\",\n        \"createdAt\": \"2025-05-05T19:23:26.143Z\",\n        \"updatedAt\": \"2025-05-05T19:23:26.143Z\",\n        \"id\": 32\n    },\n    {\n        \"title\": \"Whispering Shadow Beyond the Stars (1905)\",\n        \"author\": \"Abdelrahma Hassan\",\n        \"isbn\": \"561140\",\n        \"releaseDate\": \"10-10-2021\",\n        \"createdAt\": \"2025-05-05T19:29:43.125Z\",\n        \"updatedAt\": \"2025-05-05T19:29:43.125Z\",\n        \"id\": 33\n    },\n    {\n        \"title\": \"Silent Dream Within the Flames (1969)\",\n        \"author\": \"Abdelrahma Patel\",\n        \"isbn\": \"858010\",\n        \"releaseDate\": \"29-12-1987\",\n        \"createdAt\": \"2025-05-05T19:31:03.201Z\",\n        \"updatedAt\": \"2025-05-05T19:31:03.201Z\",\n        \"id\": 34\n    },\n    {\n        \"title\": \"New Book\",\n        \"author\": \"John Doe\",\n        \"isbn\": \"1234567890\",\n        \"releaseDate\": \"2023-10-01\",\n        \"createdAt\": \"2025-05-05T22:09:59.361Z\",\n        \"updatedAt\": \"2025-05-05T22:09:59.363Z\",\n        \"id\": 35\n    },\n    {\n        \"title\": \"New Book\",\n        \"author\": \"John Doe\",\n        \"isbn\": \"1234567890\",\n        \"releaseDate\": \"2023-10-01\",\n        \"createdAt\": \"2025-05-05T22:37:27.712Z\",\n        \"updatedAt\": \"2025-05-05T22:37:27.712Z\",\n        \"id\": 36\n    },\n    {\n        \"title\": \"New Book\",\n        \"author\": \"John Doe\",\n        \"isbn\": \"1234567890\",\n        \"releaseDate\": \"2023-10-01\",\n        \"createdAt\": \"2025-05-05T22:38:19.413Z\",\n        \"updatedAt\": \"2025-05-05T22:38:19.413Z\",\n        \"id\": 37\n    },\n    {\n        \"title\": \"Silent Secret Within the Flames (2005)\",\n        \"author\": \"Marco Morgan\",\n        \"isbn\": \"245619\",\n        \"releaseDate\": \"04-04-1901\",\n        \"createdAt\": \"2025-05-06T09:26:57.285Z\",\n        \"updatedAt\": \"2025-05-06T09:48:42.727Z\",\n        \"id\": 38\n    },\n    {\n        \"title\": \"Hidden Promise of the Night (1900)\",\n        \"author\": \"Omar Chen\",\n        \"isbn\": \"885960\",\n        \"releaseDate\": \"16-05-1956\",\n        \"createdAt\": \"2025-05-06T12:58:25.841Z\",\n        \"updatedAt\": \"2025-05-06T12:58:25.841Z\",\n        \"id\": 39\n    },\n    {\n        \"title\": \"Hidden Journey Across the Sea (1942)\",\n        \"author\": \"Raj Brown\",\n        \"isbn\": \"717736\",\n        \"releaseDate\": \"26-02-1909\",\n        \"createdAt\": \"2025-05-06T12:58:52.324Z\",\n        \"updatedAt\": \"2025-05-06T12:58:52.324Z\",\n        \"id\": 40\n    },\n    {\n        \"title\": \"Whispering Secret Across the Sea (1921)\",\n        \"author\": \"Abdelrahma Morgan\",\n        \"isbn\": \"929902\",\n        \"releaseDate\": \"24-06-1959\",\n        \"createdAt\": \"2025-05-06T13:50:44.030Z\",\n        \"updatedAt\": \"2025-05-06T13:50:44.030Z\",\n        \"id\": 41\n    },\n    {\n        \"title\": \"Mysterious Legend Within the Flames (2020)\",\n        \"author\": \"Lina Patel\",\n        \"isbn\": \"289228\",\n        \"releaseDate\": \"27-08-1986\",\n        \"createdAt\": \"2025-05-06T13:51:38.578Z\",\n        \"updatedAt\": \"2025-05-06T13:51:38.578Z\",\n        \"id\": 42\n    },\n    {\n        \"title\": \"Silent Journey Under the Moon (1912)\",\n        \"author\": \"Abdelrahma Rossi\",\n        \"isbn\": \"111240\",\n        \"releaseDate\": \"12-03-1957\",\n        \"createdAt\": \"2025-05-06T13:52:56.549Z\",\n        \"updatedAt\": \"2025-05-06T13:52:56.549Z\",\n        \"id\": 43\n    },\n    {\n        \"title\": \"Hidden Dream Within the Flames (1965)\",\n        \"author\": \"James Rossi\",\n        \"isbn\": \"494159\",\n        \"releaseDate\": \"21-11-1919\",\n        \"createdAt\": \"2025-05-06T13:59:36.408Z\",\n        \"updatedAt\": \"2025-05-06T13:59:36.408Z\",\n        \"id\": 44\n    },\n    {\n        \"title\": \"Mysterious Shadow of the Night (1977)\",\n        \"author\": \"Raj Hassan\",\n        \"isbn\": \"304391\",\n        \"releaseDate\": \"18-01-1965\",\n        \"createdAt\": \"2025-05-06T13:59:36.658Z\",\n        \"updatedAt\": \"2025-05-06T13:59:36.658Z\",\n        \"id\": 45\n    },\n    {\n        \"title\": \"Whispering Shadow Under the Moon (1907)\",\n        \"author\": \"Yuki Morgan\",\n        \"isbn\": \"964737\",\n        \"releaseDate\": \"20-01-1988\",\n        \"createdAt\": \"2025-05-06T14:11:48.603Z\",\n        \"updatedAt\": \"2025-05-06T14:11:48.603Z\",\n        \"id\": 46\n    },\n    {\n        \"title\": \"Silent Promise Under the Moon (1913)\",\n        \"author\": \"Raj Patel\",\n        \"isbn\": \"116424\",\n        \"releaseDate\": \"19-08-1957\",\n        \"createdAt\": \"2025-05-06T14:11:48.938Z\",\n        \"updatedAt\": \"2025-05-06T14:11:48.938Z\",\n        \"id\": 47\n    },\n    {\n        \"title\": \"Mysterious Secret of the Night (1959)\",\n        \"author\": \"Omar Rossi\",\n        \"isbn\": \"35775\",\n        \"releaseDate\": \"24-09-2008\",\n        \"createdAt\": \"2025-05-08T15:46:25.142Z\",\n        \"updatedAt\": \"2025-05-08T15:46:25.144Z\",\n        \"id\": 48\n    }\n]"
						}
					]
				},
				{
					"name": "Retrieve a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isbn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"releaseDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var bookTitle = pm.collectionVariables.get('title');\r",
									"var bookAuthor = pm.collectionVariables.get('author');\r",
									"var bookISBN = pm.collectionVariables.get('isbn');\r",
									"var bookReleaseDate = pm.collectionVariables.get('releaseDate');\r",
									"var bookID = pm.collectionVariables.get('bookId'); \r",
									"\r",
									"//Check the value of book title is correct\r",
									"pm.test(\"Check the book title is correct\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(bookTitle);\r",
									"});\r",
									"\r",
									"//Check the value of book author is correct\r",
									"pm.test(\"Check the book author is correct\", function () {\r",
									"    pm.expect(jsonData.author).to.eql(bookAuthor);\r",
									"});\r",
									"\r",
									"//Check the value of book ISBN is correct\r",
									"pm.test(\"Check the book ISBN is correct\", function () {\r",
									"    pm.expect(jsonData.isbn).to.eql(bookISBN);\r",
									"});\r",
									"\r",
									"//Check the value of book release date is correct\r",
									"pm.test(\"Check the book release date is correct\", function () {\r",
									"    pm.expect(jsonData.releaseDate).to.eql(bookReleaseDate);\r",
									"});\r",
									"\r",
									"//Check the value of book ID is correct\r",
									"pm.test(\"Check the book ID is correct\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(bookID);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a specific book by its ID.\n\n**Request**\n\nMethod: `GET`\n\nURL: `http://localhost:3000/books/{id}`\n\n(_Replace_ `{id}` _with the actual book ID._)\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include the details of the book with the specified ID, such as title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Retrieve a book",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books/48",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										"48"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "228"
								},
								{
									"key": "ETag",
									"value": "W/\"e4-iRxHco/jVCH7fM5A8SNmFaTIPcM\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 15:55:29 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Mysterious Secret of the Night (1959)\",\n    \"author\": \"Omar Rossi\",\n    \"isbn\": \"35775\",\n    \"releaseDate\": \"24-09-2008\",\n    \"createdAt\": \"2025-05-08T15:46:25.142Z\",\n    \"updatedAt\": \"2025-05-08T15:46:25.144Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "Update a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isbn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"releaseDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var bookTitle = pm.collectionVariables.get('title');\r",
									"var bookISBN = pm.collectionVariables.get('isbn');\r",
									"\r",
									"//Check the value of book title is updated correctly\r",
									"pm.test(\"Check the book title is updated correctly\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(bookTitle);\r",
									"});\r",
									"\r",
									"//Check the value of book ISBN is updated correctly\r",
									"pm.test(\"Check the book ISBN is updated correctly\", function () {\r",
									"    pm.expect(jsonData.isbn).to.eql(bookISBN);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating Book Title\r",
									"function generateBookTitle() {\r",
									"  const adjectives = [\"Hidden\", \"Lost\", \"Mysterious\", \"Brave\", \"Silent\", \"Shattered\", \"Whispering\"];\r",
									"  const subjects = [\"Journey\", \"Secret\", \"Legend\", \"Dream\", \"Memory\", \"Promise\", \"Shadow\"];\r",
									"  const themes = [\"of the Night\", \"in the Storm\", \"Beyond the Stars\", \"Under the Moon\", \"from the Past\", \"Within the Flames\", \"Across the Sea\"];\r",
									"\r",
									"  const adj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"  const subj = subjects[Math.floor(Math.random() * subjects.length)];\r",
									"  const theme = themes[Math.floor(Math.random() * themes.length)];\r",
									"\r",
									"  const year = Math.floor(Math.random() * (2025 - 1900 + 1)) + 1900;\r",
									"\r",
									"  return `${adj} ${subj} ${theme} (${year})`;\r",
									"}\r",
									"pm.collectionVariables.set('title',generateBookTitle());\r",
									"\r",
									"//Generating ISBN Number\r",
									"function generateIsbnNumber() {\r",
									"  return (Math.floor(Math.random() * 1000000) + 1).toString();\r",
									"}\r",
									"pm.collectionVariables.set('isbn',generateIsbnNumber());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"author\": \"{{author}}\",\r\n    \"isbn\": \"{{isbn}}\",\r\n    \"releaseDate\": \"{{releaseDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "This endpoint allows you to update the details of an existing book in the system.\n\n**Request**  \n  \nMethod: `PUT`  \n  \nURL: `http://localhost:3000/books/{id}`  \n  \n(_Replace_ `_{id}_` _with the actual book ID._)\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `title` (string, required): The title of the book.\n    \n- `author` (string, required): The author of the book.\n    \n- `isbn` (string, required): The ISBN number of the book.\n    \n- `releaseDate` (string, required): The release date of the book.\n    \n\n**Response**  \n  \nUpon successful update, the response will include the updated details of the book, including its title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Update a book",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Whispering Shadow from the Past (1901)\",\r\n    \"author\": \"Omar Rossi\",\r\n    \"isbn\": \"324398\",\r\n    \"releaseDate\": \"24-09-2008\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/books/48",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										"48"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "230"
								},
								{
									"key": "ETag",
									"value": "W/\"e6-+bid/dCHdCBX/piKxe8wl60oq/8\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:01:01 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Whispering Shadow from the Past (1901)\",\n    \"author\": \"Omar Rossi\",\n    \"isbn\": \"324398\",\n    \"releaseDate\": \"24-09-2008\",\n    \"createdAt\": \"2025-05-08T15:46:25.142Z\",\n    \"updatedAt\": \"2025-05-08T16:01:01.351Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "Retrieve updated book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var bookTitle = pm.collectionVariables.get('title');\r",
									"var bookISBN = pm.collectionVariables.get('isbn');\r",
									"\r",
									"//Check the value of book title is updated correctly\r",
									"pm.test(\"Check the book title is updated correctly\", function () {\r",
									"    pm.expect(jsonData.title).to.eql(bookTitle);\r",
									"});\r",
									"\r",
									"//Check the value of book ISBN is updated correctly\r",
									"pm.test(\"Check the book ISBN is updated correctly\", function () {\r",
									"    pm.expect(jsonData.isbn).to.eql(bookISBN);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of an updated book by its ID.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/books/{id}`  \n  \n(_Replace_ `_{id}_` _with the actual book ID._)\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include the updated details of the book, such as title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Retrieve updated book",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books/48",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										"48"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "230"
								},
								{
									"key": "ETag",
									"value": "W/\"e6-+bid/dCHdCBX/piKxe8wl60oq/8\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:03:32 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Whispering Shadow from the Past (1901)\",\n    \"author\": \"Omar Rossi\",\n    \"isbn\": \"324398\",\n    \"releaseDate\": \"24-09-2008\",\n    \"createdAt\": \"2025-05-08T15:46:25.142Z\",\n    \"updatedAt\": \"2025-05-08T16:01:01.351Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "Partially update a book",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating Author Name\r",
									"function generateAuthorName() {\r",
									"  const firstNames = [\"Abdelrahma\", \"James\", \"Lina\", \"Omar\", \"Sophie\", \"Raj\", \"Fatima\", \"Marco\", \"Yuki\"];\r",
									"  const lastNames = [\"Fahmy\", \"Morgan\", \"Chen\", \"Patel\", \"Hassan\", \"Rossi\", \"Brown\", \"Tanaka\", \"Khalil\"];\r",
									"\r",
									"  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"\r",
									"  return `${firstName} ${lastName}`;\r",
									"}\r",
									"pm.collectionVariables.set('author',generateAuthorName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"title\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"author\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"isbn\": {\r",
									"      \"type\": \"string\"\r",
									"    },\r",
									"    \"releaseDate\": {\r",
									"      \"type\": \"string\",\r",
									"      \"pattern\": \"^[0-9]{2}-[0-9]{2}-[0-9]{4}$\"\r",
									"    },\r",
									"    \"id\": {\r",
									"      \"type\": \"integer\"\r",
									"    }\r",
									"  },\r",
									"  \"required\": [\"title\", \"author\", \"isbn\", \"releaseDate\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var bookAuthor = pm.collectionVariables.get('author');\r",
									"\r",
									"//Check the value of book author is updated correctly\r",
									"pm.test(\"Check the book author is updated correctly\", function () {\r",
									"    pm.expect(jsonData.author).to.eql(bookAuthor);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "PATCH",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"author\": \"{{author}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "This endpoint allows you to update specific fields of a book without modifying the entire book. It uses the PATCH method.\n\n**Request**  \n  \nMethod: `PATCH`  \n  \nURL: `http://localhost:3000/books/{id}`  \n  \n(_Replace_ `_{id}_` _with the actual book ID._)\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**  \n  \nYou can update only the fields you want to change. You don't need to send the entire book object. The request body can contain one or more of the following fields:\n\n- `title` (string, optional): The title of the book.\n    \n- `author` (string, optional): The author of the book.\n    \n- `isbn` (string, optional): The ISBN number of the book.\n    \n- `releaseDate` (string, optional): The release date of the book.\n    \n\n**Response**  \n  \nUpon successful partial update, the response will include the updated details of the book, including its title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Partially update a book",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"author\": \"Marco Brown\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/books/48",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										"48"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "231"
								},
								{
									"key": "ETag",
									"value": "W/\"e7-MsH2evX2iZX6QhM0T9ml3m1D/8k\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:06:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Whispering Shadow from the Past (1901)\",\n    \"author\": \"Marco Brown\",\n    \"isbn\": \"324398\",\n    \"releaseDate\": \"24-09-2008\",\n    \"createdAt\": \"2025-05-08T15:46:25.142Z\",\n    \"updatedAt\": \"2025-05-08T16:01:01.351Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "Retrieve partially updated book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var bookAuthor = pm.collectionVariables.get('author');\r",
									"\r",
									"//Check the value of book author is updated correctly\r",
									"pm.test(\"Check the book author is updated correctly\", function () {\r",
									"    pm.expect(jsonData.author).to.eql(bookAuthor);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a book that has been partially updated.\n\n**Request**\n\nMethod: `GET`\n\nURL: `http://localhost:3000/books/{id}`\n\n(_Replace_ `{id}` _with the actual book ID._)\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include the updated details of the book, reflecting any changes made during the partial update. It will include the book's title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Retrieve partially updated book",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books/48",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										"48"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "231"
								},
								{
									"key": "ETag",
									"value": "W/\"e7-MsH2evX2iZX6QhM0T9ml3m1D/8k\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:09:21 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Whispering Shadow from the Past (1901)\",\n    \"author\": \"Marco Brown\",\n    \"isbn\": \"324398\",\n    \"releaseDate\": \"24-09-2008\",\n    \"createdAt\": \"2025-05-08T15:46:25.142Z\",\n    \"updatedAt\": \"2025-05-08T16:01:01.351Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "Delete a book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "This endpoint allows you to delete a book from the system by its ID.\n\n**Request**  \n  \nMethod: `DELETE`  \n  \nURL: `http://localhost:3000/books/{id}`  \n  \n(_Replace_ `_{id}_` _with the actual book ID._)\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful deletion, the response will return an empty body with no content."
					},
					"response": [
						{
							"name": "Delete a book",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books/48",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										"48"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:11:40 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Retrieve deleted book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Check the message in the response body.\r",
									"pm.test(\"Check the message in the response body\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Book not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/books/{{bookId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books",
								"{{bookId}}"
							]
						},
						"description": "This endpoint allows you to attempt retrieving a book after it has been deleted.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/books/{id}`  \n  \n(_Replace_ `_{id}_` _with the actual book ID._)\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nIf the book has been deleted, the response will return a message indicating that the book was not found."
					},
					"response": [
						{
							"name": "Retrieve deleted book",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/books/48",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books",
										"48"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "ETag",
									"value": "W/\"21-scWDTMDC1xwvJ1YlcV1rbeay1i4\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:15:47 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Book not found\"\n}"
						}
					]
				}
			],
			"description": "> **This folder contains requests to manage books, including adding, updating, finding, and deleting books.**"
		},
		{
			"name": "Households",
			"item": [
				{
					"name": "Create a new household",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHouseholdName() {\r",
									"    const adjectives = [\"Happy\", \"Cozy\", \"Brave\", \"Cheerful\", \"Lovely\", \"Peaceful\", \"Bright\"];\r",
									"    const surnames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Miller\"];\r",
									"    const randomAdj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomSurname = surnames[Math.floor(Math.random() * surnames.length)];\r",
									"    return `${randomAdj} ${randomSurname} Household`;\r",
									"}\r",
									"pm.collectionVariables.set(\"householdName\", generateRandomHouseholdName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedHouseholdName = pm.collectionVariables.get('householdName');\r",
									"\r",
									"//Check the value of household name is correct\r",
									"pm.test(\"Check the household name is correct\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedHouseholdName);\r",
									"});\r",
									"\r",
									"//Setting the value of household id to a collection variable\r",
									"pm.collectionVariables.set('householdId', jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"name\": \"{{householdName}}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/households",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households"
							]
						},
						"description": "This endpoint allows you to add a new household to the system.\n\n**Request**\n\nMethod: `POST`\n\nURL: `http://localhost:3000/households`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `name` (string, required): The name of the household.\n    \n\n**Response**\n\nUpon successful creation, the response will include the details of the newly added household, including its name and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Create a new household",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Lovely Johnson Household\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/households",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "138"
								},
								{
									"key": "ETag",
									"value": "W/\"8a-yU+FN+AECy+WppqF3Ttat1yIP2Q\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:22:59 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Lovely Johnson Household\",\n    \"createdAt\": \"2025-05-08T16:22:59.739Z\",\n    \"updatedAt\": \"2025-05-08T16:22:59.739Z\",\n    \"id\": 22\n}"
						}
					]
				},
				{
					"name": "Retrieve all households",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var householdID = pm.collectionVariables.get('householdId');\r",
									"var expectedHouseholdName = pm.collectionVariables.get('householdName');\r",
									"\r",
									"//Finding the added household between the households.\r",
									"const household = jsonData.find(h => h.id === householdID)\r",
									"\r",
									"//Checking the schema of the book.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.expect(household).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Check the value of house hold name is correct\r",
									"pm.test(\"Check the house hold name is correct\", function () {\r",
									"    pm.expect(household.name).to.eql(expectedHouseholdName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/households",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households"
							]
						},
						"description": "This endpoint allows you to retrieve a list of all households in the system.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/households`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include an array of households with their details."
					},
					"response": [
						{
							"name": "Retrieve all households",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"1407-TXUgiQ7zSLKMrfe41kJb2Lki3q4\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:27:10 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T20:26:10.531Z\",\n        \"updatedAt\": \"2021-06-26T20:26:10.531Z\",\n        \"id\": 1,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/1\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T21:33:28.552Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.552Z\",\n        \"id\": 2,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/2\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-26T21:34:19.926Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.926Z\",\n        \"id\": 3,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/3\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T18:49:47.360Z\",\n        \"updatedAt\": \"2021-06-27T18:49:47.360Z\",\n        \"id\": 4,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/4\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T18:50:08.649Z\",\n        \"updatedAt\": \"2021-06-27T18:50:08.649Z\",\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/5\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-27T19:02:34.438Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.438Z\",\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/6\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:24:17.906Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.906Z\",\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/7\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:25:54.956Z\",\n        \"updatedAt\": \"2021-06-29T23:25:54.956Z\",\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/8\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:27:22.503Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.503Z\",\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/9\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:27:49.847Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.847Z\",\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/10\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:28:08.408Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.408Z\",\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/11\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:28:17.226Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.226Z\",\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/12\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:29:10.920Z\",\n        \"updatedAt\": \"2021-06-29T23:29:10.920Z\",\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/13\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:31:02.870Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.870Z\",\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/14\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:31:11.762Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.762Z\",\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/15\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-29T23:32:12.201Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.201Z\",\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/16\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-06-30T00:23:07.225Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.225Z\",\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/households/17\"\n            }\n        ]\n    },\n    {\n        \"name\": \"Taylor Household\",\n        \"createdAt\": \"2021-07-10T23:52:56.361Z\",\n        \"updatedAt\": \"2021-07-10T23:52:56.361Z\",\n        \"id\": 18\n    },\n    {\n        \"name\": \"Household Name2\",\n        \"createdAt\": \"2025-05-06T10:11:38.197Z\",\n        \"updatedAt\": \"2025-05-06T10:11:38.197Z\",\n        \"id\": 19\n    },\n    {\n        \"name\": \"Lovely Brown Household\",\n        \"createdAt\": \"2025-05-06T11:34:37.554Z\",\n        \"updatedAt\": \"2025-05-06T11:34:37.554Z\",\n        \"id\": 20\n    },\n    {\n        \"name\": \"Cozy Williams Household\",\n        \"createdAt\": \"2025-05-06T11:34:59.446Z\",\n        \"updatedAt\": \"2025-05-06T11:34:59.446Z\",\n        \"id\": 21\n    },\n    {\n        \"name\": \"Lovely Johnson Household\",\n        \"createdAt\": \"2025-05-08T16:22:59.739Z\",\n        \"updatedAt\": \"2025-05-08T16:22:59.739Z\",\n        \"id\": 22\n    }\n]"
						}
					]
				},
				{
					"name": "Retrieve a household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedHouseholdName = pm.collectionVariables.get('householdName');\r",
									"\r",
									"//Check the value of household name is correct\r",
									"pm.test(\"Check the household name is correct\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedHouseholdName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/households/{{householdId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households",
								"{{householdId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a specific household by its ID.\n\n**Request**\n\nMethod: `GET`\n\nURL: `http://localhost:3000/households/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include the details of the household."
					},
					"response": [
						{
							"name": "Retrieve a household",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households/22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										"22"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "138"
								},
								{
									"key": "ETag",
									"value": "W/\"8a-yU+FN+AECy+WppqF3Ttat1yIP2Q\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:33:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Lovely Johnson Household\",\n    \"createdAt\": \"2025-05-08T16:22:59.739Z\",\n    \"updatedAt\": \"2025-05-08T16:22:59.739Z\",\n    \"id\": 22\n}"
						}
					]
				},
				{
					"name": "Update a household",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHouseholdName() {\r",
									"    const adjectives = [\"Happy\", \"Cozy\", \"Brave\", \"Cheerful\", \"Lovely\", \"Peaceful\", \"Bright\"];\r",
									"    const surnames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Miller\"];\r",
									"    const randomAdj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomSurname = surnames[Math.floor(Math.random() * surnames.length)];\r",
									"    return `${randomAdj} ${randomSurname} Household`;\r",
									"}\r",
									"pm.collectionVariables.set(\"householdName\", generateRandomHouseholdName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedHouseholdName = pm.collectionVariables.get('householdName');\r",
									"\r",
									"//Check the value of household name is updated correctly\r",
									"pm.test(\"Check the household name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedHouseholdName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"name\": \"{{householdName}}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/households/{{householdId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households",
								"{{householdId}}"
							]
						},
						"description": "This endpoint allows you to update the details of an existing household.\n\n**Request**  \n  \nMethod: `PUT`  \n  \nURL: `http://localhost:3000/households/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `name` (string, required): The name of the household.\n    \n\n**Response**  \n  \nUpon successful update, the response will include the updated household details."
					},
					"response": [
						{
							"name": "Update a household",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Brave Jones Household\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/households/22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										"22"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "135"
								},
								{
									"key": "ETag",
									"value": "W/\"87-nwbQpK2wQDzKWOEUIuPApDrr93o\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:34:42 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Brave Jones Household\",\n    \"createdAt\": \"2025-05-08T16:22:59.739Z\",\n    \"updatedAt\": \"2025-05-08T16:34:42.513Z\",\n    \"id\": 22\n}"
						}
					]
				},
				{
					"name": "Retrieve updated household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedHouseholdName = pm.collectionVariables.get('householdName');\r",
									"\r",
									"//Check the value of household name is updated correctly\r",
									"pm.test(\"Check the household name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedHouseholdName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/households/{{householdId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households",
								"{{householdId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of an updated household by its ID.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/households/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include the updated details."
					},
					"response": [
						{
							"name": "Retrieve updated household",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households/22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										"22"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "135"
								},
								{
									"key": "ETag",
									"value": "W/\"87-nwbQpK2wQDzKWOEUIuPApDrr93o\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:36:52 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Brave Jones Household\",\n    \"createdAt\": \"2025-05-08T16:22:59.739Z\",\n    \"updatedAt\": \"2025-05-08T16:34:42.513Z\",\n    \"id\": 22\n}"
						}
					]
				},
				{
					"name": "Partially update a household",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomHouseholdName() {\r",
									"    const adjectives = [\"Happy\", \"Cozy\", \"Brave\", \"Cheerful\", \"Lovely\", \"Peaceful\", \"Bright\"];\r",
									"    const surnames = [\"Smith\", \"Johnson\", \"Williams\", \"Brown\", \"Jones\", \"Miller\"];\r",
									"    const randomAdj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"    const randomSurname = surnames[Math.floor(Math.random() * surnames.length)];\r",
									"    return `${randomAdj} ${randomSurname} Household`;\r",
									"}\r",
									"pm.collectionVariables.set(\"householdName\", generateRandomHouseholdName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedHouseholdName = pm.collectionVariables.get('householdName');\r",
									"\r",
									"//Check the value of household name is updated correctly\r",
									"pm.test(\"Check the household name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedHouseholdName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"name\": \"{{householdName}}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/households/{{householdId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households",
								"{{householdId}}"
							]
						},
						"description": "This endpoint allows you to partially update specific fields of a household.\n\n**Request**  \n  \nMethod: `PATCH`  \n  \nURL: `http://localhost:3000/households/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `name` (string, optional): The name of the household.\n    \n\n**Response**  \n  \nUpon successful partial update, the response will include the updated household details."
					},
					"response": [
						{
							"name": "Partially update a household",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Happy Jones Household\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/households/22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										"22"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "135"
								},
								{
									"key": "ETag",
									"value": "W/\"87-bnuTJr3+uVKs0KugPL0o24vIpnY\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:38:41 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Happy Jones Household\",\n    \"createdAt\": \"2025-05-08T16:22:59.739Z\",\n    \"updatedAt\": \"2025-05-08T16:34:42.513Z\",\n    \"id\": 22\n}"
						}
					]
				},
				{
					"name": "Retrieve partially updated household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedHouseholdName = pm.collectionVariables.get('householdName');\r",
									"\r",
									"//Check the value of household name is updated correctly\r",
									"pm.test(\"Check the household name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedHouseholdName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/households/{{householdId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households",
								"{{householdId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a partially updated household.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/households/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include the updated details."
					},
					"response": [
						{
							"name": "Retrieve partially updated household",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households/22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										"22"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "135"
								},
								{
									"key": "ETag",
									"value": "W/\"87-bnuTJr3+uVKs0KugPL0o24vIpnY\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:40:17 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Happy Jones Household\",\n    \"createdAt\": \"2025-05-08T16:22:59.739Z\",\n    \"updatedAt\": \"2025-05-08T16:34:42.513Z\",\n    \"id\": 22\n}"
						}
					]
				},
				{
					"name": "Delete a household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/households/{{householdId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households",
								"{{householdId}}"
							]
						},
						"description": "This endpoint allows you to delete a household by its ID.\n\n**Request**  \n  \nMethod: `DELETE`  \n  \nURL: `http://localhost:3000/households/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful deletion, the response will return an empty body with no content."
					},
					"response": [
						{
							"name": "Delete a household",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households/22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										"22"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:42:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Retrieve deleted household",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Check the message in the response body.\r",
									"pm.test(\"Check the message in the response body\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Household not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/households/{{householdId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"households",
								"{{householdId}}"
							]
						},
						"description": "This endpoint allows you to attempt retrieving a household after it has been deleted.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/households/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nIf the household has been deleted, the response will return a message indicating that the household was not found."
					},
					"response": [
						{
							"name": "Retrieve deleted household",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/households/22",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"households",
										"22"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "38"
								},
								{
									"key": "ETag",
									"value": "W/\"26-v4aOsgDFZWLbBLdtaD1li4L2uMc\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:44:36 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Household not found\"\n}"
						}
					]
				}
			],
			"description": "> **This folder contains requests to manage households, including adding, updating, finding, and deleting households.**"
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Create a new user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating a random first name for the user.\r",
									"function generateFirstName() {\r",
									"    const randomNumber = Math.floor(Math.random() * 10000);\r",
									"    return `Abdelrahman-${randomNumber}`;\r",
									"}\r",
									"pm.collectionVariables.set('firstName',generateFirstName());\r",
									"\r",
									"//Generating a random last name for the user.\r",
									"function generateLastName() {\r",
									"    const randomNumber = Math.floor(Math.random() * 10000);\r",
									"    return `Fahmy-${randomNumber}`;\r",
									"}\r",
									"pm.collectionVariables.set('lastName',generateLastName());\r",
									"\r",
									"//Generating a random email for the user.\r",
									"function generateEmail() {\r",
									"    const domains = [\"gmail.com\", \"yahoo.com\", \"outlook.com\", \"hotmail.com\"];\r",
									"    const randomNumber = Math.floor(Math.random() * 1000); // number 0–999\r",
									"    const randomDomain = domains[Math.floor(Math.random() * domains.length)];\r",
									"    return `Abdelrahman${randomNumber}@${randomDomain}`;\r",
									"}\r",
									"pm.collectionVariables.set('email',generateEmail());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": { \"type\": \"string\" },\r",
									"    \"lastName\": { \"type\": \"string\" },\r",
									"    \"email\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedFirstName = pm.collectionVariables.get('firstName');\r",
									"var expectedLastName = pm.collectionVariables.get('lastName');\r",
									"var expectedEmail = pm.collectionVariables.get('email');\r",
									"\r",
									"//Check the value of first name is correct\r",
									"pm.test(\"Check the first name is correct\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(expectedFirstName);\r",
									"});\r",
									"\r",
									"//Check the value of last name is correct\r",
									"pm.test(\"Check the last name is correct\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(expectedLastName);\r",
									"});\r",
									"\r",
									"//Check the value of email is correct\r",
									"pm.test(\"Check the email is correct\", function () {\r",
									"    pm.expect(jsonData.email).to.eql(expectedEmail);\r",
									"});\r",
									"\r",
									"//Setting the value of user id to a collection variable\r",
									"pm.collectionVariables.set('userId', jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"firstName\": \"{{firstName}}\", \r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This endpoint allows you to add a new user to the system.\n\n**Request**\n\nMethod: `POST`\n\nURL: `http://localhost:3000/users`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `firstName` (string, required): The first name of the user.\n    \n- `lastName` (string, required): The last name of the user.\n    \n- `email` (string, required): The email address of the user.\n    \n\n**Response**\n\nUpon successful creation, the response will include the details of the newly added user."
					},
					"response": [
						{
							"name": "Create a new user",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"firstName\": \"Abdelrahman-4421\",\r\n    \"lastName\": \"Fahmy-2929\",\r\n    \"email\": \"Abdelrahman227@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "202"
								},
								{
									"key": "ETag",
									"value": "W/\"ca-pIvq0XTD09dbP4zW3y3hBQQZ2ZY\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 16:48:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Abdelrahman-4421\",\n    \"lastName\": \"Fahmy-2929\",\n    \"email\": \"Abdelrahman227@gmail.com\",\n    \"createdAt\": \"2025-05-08T16:48:23.476Z\",\n    \"updatedAt\": \"2025-05-08T16:48:23.476Z\",\n    \"id\": 40\n}"
						}
					]
				},
				{
					"name": "Retrieve all users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var userId = pm.collectionVariables.get(\"userId\");\r",
									"var expectedFirstName = pm.collectionVariables.get('firstName');\r",
									"var expectedLastName = pm.collectionVariables.get('lastName');\r",
									"var expectedEmail = pm.collectionVariables.get('email');\r",
									"\r",
									"//Finding the added user between the users.\r",
									"const user = jsonData.find(u => u.id === userId)\r",
									"\r",
									"//Checking the schema of the user.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": { \"type\": \"string\" },\r",
									"    \"lastName\": { \"type\": \"string\" },\r",
									"    \"email\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.expect(user).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Check the value of first name is correct\r",
									"pm.test(\"Check the first name is correct\", function () {\r",
									"    pm.expect(user.firstName).to.eql(expectedFirstName);\r",
									"});\r",
									"\r",
									"//Check the value of last name is correct\r",
									"pm.test(\"Check the last name is correct\", function () {\r",
									"    pm.expect(user.lastName).to.eql(expectedLastName);\r",
									"});\r",
									"\r",
									"//Check the value of email is correct\r",
									"pm.test(\"Check the email is correct\", function () {\r",
									"    pm.expect(user.email).to.eql(expectedEmail);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users"
							]
						},
						"description": "This endpoint allows you to retrieve a list of all users in the system.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/users`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include an array of user details."
					},
					"response": [
						{
							"name": "Retrieve all users",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/users",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"34bb-IyItFxgWzjArqBD0pL8Nb2dQk5E\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:25:39 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T20:50:31.944Z\",\n        \"updatedAt\": \"2021-06-26T20:50:31.944Z\",\n        \"wishlistId\": 1,\n        \"id\": 1,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/1\"\n            }\n        ]\n    },\n    {\n        \"email\": \"chip+taylonr@gmail.com\",\n        \"firstName\": \"Chocolate Chip\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T20:53:02.478Z\",\n        \"updatedAt\": \"2021-06-26T20:53:02.478Z\",\n        \"wishlistId\": 2,\n        \"id\": 2,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/2\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:33:28.578Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.578Z\",\n        \"wishlistId\": 3,\n        \"id\": 3,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/3\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:33:28.596Z\",\n        \"updatedAt\": \"2021-06-26T21:33:28.596Z\",\n        \"wishlistId\": 4,\n        \"id\": 4,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/4\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:34:19.949Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.949Z\",\n        \"wishlistId\": 5,\n        \"id\": 5,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/5\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 1,\n        \"createdAt\": \"2021-06-26T21:34:19.966Z\",\n        \"updatedAt\": \"2021-06-26T21:34:19.966Z\",\n        \"wishlistId\": 6,\n        \"id\": 6,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/6\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:02:34.474Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.474Z\",\n        \"wishlistId\": 7,\n        \"id\": 7,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/7\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:02:34.504Z\",\n        \"updatedAt\": \"2021-06-27T19:02:34.504Z\",\n        \"wishlistId\": 8,\n        \"id\": 8,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/8\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:25:05.658Z\",\n        \"updatedAt\": \"2021-06-27T19:25:05.658Z\",\n        \"wishlistId\": 9,\n        \"id\": 9,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/9\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 6,\n        \"createdAt\": \"2021-06-27T19:27:15.137Z\",\n        \"updatedAt\": \"2021-06-27T19:27:15.137Z\",\n        \"wishlistId\": 10,\n        \"id\": 10,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/10\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 7,\n        \"createdAt\": \"2021-06-29T23:24:17.944Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.944Z\",\n        \"wishlistId\": 11,\n        \"id\": 11,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/11\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 7,\n        \"createdAt\": \"2021-06-29T23:24:17.979Z\",\n        \"updatedAt\": \"2021-06-29T23:24:17.979Z\",\n        \"wishlistId\": 12,\n        \"id\": 12,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/12\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 8,\n        \"createdAt\": \"2021-06-29T23:25:54.991Z\",\n        \"updatedAt\": \"2021-06-29T23:25:54.991Z\",\n        \"wishlistId\": 13,\n        \"id\": 13,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/13\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 8,\n        \"createdAt\": \"2021-06-29T23:25:55.024Z\",\n        \"updatedAt\": \"2021-06-29T23:25:55.024Z\",\n        \"wishlistId\": 14,\n        \"id\": 14,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/14\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 9,\n        \"createdAt\": \"2021-06-29T23:27:22.541Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.541Z\",\n        \"wishlistId\": 15,\n        \"id\": 15,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/15\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 9,\n        \"createdAt\": \"2021-06-29T23:27:22.576Z\",\n        \"updatedAt\": \"2021-06-29T23:27:22.576Z\",\n        \"wishlistId\": 16,\n        \"id\": 16,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/16\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 10,\n        \"createdAt\": \"2021-06-29T23:27:49.888Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.888Z\",\n        \"wishlistId\": 17,\n        \"id\": 17,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/17\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 10,\n        \"createdAt\": \"2021-06-29T23:27:49.921Z\",\n        \"updatedAt\": \"2021-06-29T23:27:49.921Z\",\n        \"wishlistId\": 18,\n        \"id\": 18,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/18\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 11,\n        \"createdAt\": \"2021-06-29T23:28:08.460Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.460Z\",\n        \"wishlistId\": 19,\n        \"id\": 19,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/19\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 11,\n        \"createdAt\": \"2021-06-29T23:28:08.492Z\",\n        \"updatedAt\": \"2021-06-29T23:28:08.492Z\",\n        \"wishlistId\": 20,\n        \"id\": 20,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/20\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 12,\n        \"createdAt\": \"2021-06-29T23:28:17.267Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.267Z\",\n        \"wishlistId\": 21,\n        \"id\": 21,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/21\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 12,\n        \"createdAt\": \"2021-06-29T23:28:17.301Z\",\n        \"updatedAt\": \"2021-06-29T23:28:17.301Z\",\n        \"wishlistId\": 22,\n        \"id\": 22,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/22\"\n            }\n        ]\n    },\n    {\n        \"email\": \"charles@mailinator.com\",\n        \"firstName\": \"Charles\",\n        \"lastName\": \"Spurgeon\",\n        \"householdId\": 13,\n        \"createdAt\": \"2021-06-29T23:29:10.970Z\",\n        \"updatedAt\": \"2021-06-29T23:29:10.970Z\",\n        \"wishlistId\": 23,\n        \"id\": 23,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/23\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 13,\n        \"createdAt\": \"2021-06-29T23:29:11.012Z\",\n        \"updatedAt\": \"2021-06-29T23:29:11.012Z\",\n        \"wishlistId\": 24,\n        \"id\": 24,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/24\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 14,\n        \"createdAt\": \"2021-06-29T23:31:02.913Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.913Z\",\n        \"wishlistId\": 25,\n        \"id\": 25,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/25\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 14,\n        \"createdAt\": \"2021-06-29T23:31:02.955Z\",\n        \"updatedAt\": \"2021-06-29T23:31:02.955Z\",\n        \"wishlistId\": 26,\n        \"id\": 26,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/26\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 15,\n        \"createdAt\": \"2021-06-29T23:31:11.806Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.806Z\",\n        \"wishlistId\": 27,\n        \"id\": 27,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/27\"\n            }\n        ]\n    },\n    {\n        \"email\": \"jon@mailinator.com\",\n        \"firstName\": \"Jonathan\",\n        \"lastName\": \"Edwards\",\n        \"householdId\": 15,\n        \"createdAt\": \"2021-06-29T23:31:11.842Z\",\n        \"updatedAt\": \"2021-06-29T23:31:11.842Z\",\n        \"wishlistId\": 28,\n        \"id\": 28,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/28\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"householdId\": 16,\n        \"createdAt\": \"2021-06-29T23:32:12.241Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.241Z\",\n        \"wishlistId\": 29,\n        \"id\": 29,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/29\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 16,\n        \"createdAt\": \"2021-06-29T23:32:12.282Z\",\n        \"updatedAt\": \"2021-06-29T23:32:12.282Z\",\n        \"wishlistId\": 30,\n        \"id\": 30,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/30\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 17,\n        \"createdAt\": \"2021-06-30T00:23:07.314Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.314Z\",\n        \"wishlistId\": 31,\n        \"id\": 31,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/31\"\n            }\n        ]\n    },\n    {\n        \"email\": \"cs@mailinator.com\",\n        \"firstName\": \"C.S.\",\n        \"lastName\": \"Lewis\",\n        \"householdId\": 17,\n        \"createdAt\": \"2021-06-30T00:23:07.407Z\",\n        \"updatedAt\": \"2021-06-30T00:23:07.407Z\",\n        \"wishlistId\": 32,\n        \"id\": 32,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/32\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-06-30T01:21:35.350Z\",\n        \"updatedAt\": \"2021-06-30T01:21:35.350Z\",\n        \"wishlistId\": 33,\n        \"id\": 33,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/33\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-06-30T01:23:19.443Z\",\n        \"updatedAt\": \"2021-06-30T01:23:19.443Z\",\n        \"wishlistId\": 34,\n        \"id\": 34,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/34\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-07-01T22:25:45.718Z\",\n        \"updatedAt\": \"2021-07-01T22:25:45.792Z\",\n        \"wishlistId\": 35,\n        \"id\": 35,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/35\"\n            }\n        ]\n    },\n    {\n        \"email\": \"taylonr@gmail.com\",\n        \"firstName\": \"Nate\",\n        \"lastName\": \"Taylor\",\n        \"createdAt\": \"2021-07-01T22:31:49.175Z\",\n        \"updatedAt\": \"2021-07-01T22:31:49.175Z\",\n        \"wishlistId\": 36,\n        \"id\": 36,\n        \"links\": [\n            {\n                \"rel\": \"self\",\n                \"href\": \"http://localhost:3000/users/36\"\n            }\n        ]\n    },\n    {\n        \"firstName\": \"Abdelrahman-511\",\n        \"lastName\": \"Fahmy-4809\",\n        \"email\": \"Abdelrahman582@gmail.com\",\n        \"createdAt\": \"2025-05-06T12:10:57.049Z\",\n        \"updatedAt\": \"2025-05-06T12:10:57.049Z\",\n        \"id\": 37\n    },\n    {\n        \"firstName\": \"Abdelrahman-8498\",\n        \"lastName\": \"Fahmy-904\",\n        \"email\": \"Abdelrahman602@gmail.com\",\n        \"createdAt\": \"2025-05-06T12:12:45.948Z\",\n        \"updatedAt\": \"2025-05-06T12:12:45.948Z\",\n        \"id\": 38\n    },\n    {\n        \"firstName\": \"Abdelrahman-6763\",\n        \"lastName\": \"Fahmy-9744\",\n        \"email\": \"Abdelrahman685@outlook.com\",\n        \"createdAt\": \"2025-05-06T12:14:57.636Z\",\n        \"updatedAt\": \"2025-05-06T12:14:57.636Z\",\n        \"id\": 39\n    },\n    {\n        \"firstName\": \"Abdelrahman-4421\",\n        \"lastName\": \"Fahmy-2929\",\n        \"email\": \"Abdelrahman227@gmail.com\",\n        \"createdAt\": \"2025-05-08T16:48:23.476Z\",\n        \"updatedAt\": \"2025-05-08T16:48:23.476Z\",\n        \"id\": 40\n    }\n]"
						}
					]
				},
				{
					"name": "Retrieve a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": { \"type\": \"string\" },\r",
									"    \"lastName\": { \"type\": \"string\" },\r",
									"    \"email\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedFirstName = pm.collectionVariables.get('firstName');\r",
									"var expectedLastName = pm.collectionVariables.get('lastName');\r",
									"var expectedEmail = pm.collectionVariables.get('email');\r",
									"\r",
									"//Check the value of first name is correct\r",
									"pm.test(\"Check the first name is correct\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(expectedFirstName);\r",
									"});\r",
									"\r",
									"//Check the value of last name is correct\r",
									"pm.test(\"Check the last name is correct\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(expectedLastName);\r",
									"});\r",
									"\r",
									"//Check the value of email is correct\r",
									"pm.test(\"Check the email is correct\", function () {\r",
									"    pm.expect(jsonData.email).to.eql(expectedEmail);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a specific user by ID.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/users/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include the user’s details."
					},
					"response": [
						{
							"name": "Retrieve a user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/users/40",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"40"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "202"
								},
								{
									"key": "ETag",
									"value": "W/\"ca-pIvq0XTD09dbP4zW3y3hBQQZ2ZY\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:26:49 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Abdelrahman-4421\",\n    \"lastName\": \"Fahmy-2929\",\n    \"email\": \"Abdelrahman227@gmail.com\",\n    \"createdAt\": \"2025-05-08T16:48:23.476Z\",\n    \"updatedAt\": \"2025-05-08T16:48:23.476Z\",\n    \"id\": 40\n}"
						}
					]
				},
				{
					"name": "Update a user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating a random first name for the user.\r",
									"function generateFirstName() {\r",
									"    const randomNumber = Math.floor(Math.random() * 10000);\r",
									"    return `Abdelrahman-${randomNumber}`;\r",
									"}\r",
									"pm.collectionVariables.set('firstName',generateFirstName());\r",
									"\r",
									"//Generating a random email for the user.\r",
									"function generateEmail() {\r",
									"    const domains = [\"gmail.com\", \"yahoo.com\", \"outlook.com\", \"hotmail.com\"];\r",
									"    const randomNumber = Math.floor(Math.random() * 1000); // number 0–999\r",
									"    const randomDomain = domains[Math.floor(Math.random() * domains.length)];\r",
									"    return `Abdelrahman${randomNumber}@${randomDomain}`;\r",
									"}\r",
									"pm.collectionVariables.set('email',generateEmail());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": { \"type\": \"string\" },\r",
									"    \"lastName\": { \"type\": \"string\" },\r",
									"    \"email\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedFirstName = pm.collectionVariables.get('firstName');\r",
									"var expectedEmail = pm.collectionVariables.get('email');\r",
									"\r",
									"//Check the value of first name is updated correctly\r",
									"pm.test(\"Check the first name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(expectedFirstName);\r",
									"});\r",
									"\r",
									"//Check the value of email is updated correctly\r",
									"pm.test(\"Check the email is updated correctly\", function () {\r",
									"    pm.expect(jsonData.email).to.eql(expectedEmail);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"firstName\": \"{{firstName}}\", \r\n    \"lastName\": \"{{lastName}}\",\r\n    \"email\": \"{{email}}\" \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This endpoint allows you to update an existing user’s details.\n\n**Request**  \n  \nMethod: `PUT`  \n  \nURL: `http://localhost:3000/users/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `firstName` (string, required)\n    \n- `lastName` (string, required)\n    \n- `email` (string, required)\n    \n\n**Response**  \n  \nUpon successful update, the response will include the updated user details."
					},
					"response": [
						{
							"name": "Update a user",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"firstName\": \"Abdelrahman-9784\",\r\n    \"lastName\": \"Fahmy-2929\",\r\n    \"email\": \"Abdelrahman911@gmail.com\" \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/users/40",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"40"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "202"
								},
								{
									"key": "ETag",
									"value": "W/\"ca-tu7e+B2nKUJThqR24XLQEGFpxF4\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:28:14 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Abdelrahman-9784\",\n    \"lastName\": \"Fahmy-2929\",\n    \"email\": \"Abdelrahman911@gmail.com\",\n    \"createdAt\": \"2025-05-08T16:48:23.476Z\",\n    \"updatedAt\": \"2025-05-08T17:28:14.879Z\",\n    \"id\": 40\n}"
						}
					]
				},
				{
					"name": "Retrieve updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedFirstName = pm.collectionVariables.get('firstName');\r",
									"var expectedEmail = pm.collectionVariables.get('email');\r",
									"\r",
									"//Check the value of first name is updated correctly\r",
									"pm.test(\"Check the first name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.firstName).to.eql(expectedFirstName);\r",
									"});\r",
									"\r",
									"//Check the value of email is updated correctly\r",
									"pm.test(\"Check the email is updated correctly\", function () {\r",
									"    pm.expect(jsonData.email).to.eql(expectedEmail);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of an updated user.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/users/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include the updated details."
					},
					"response": [
						{
							"name": "Retrieve updated user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/users/40",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"40"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "202"
								},
								{
									"key": "ETag",
									"value": "W/\"ca-tu7e+B2nKUJThqR24XLQEGFpxF4\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:30:45 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Abdelrahman-9784\",\n    \"lastName\": \"Fahmy-2929\",\n    \"email\": \"Abdelrahman911@gmail.com\",\n    \"createdAt\": \"2025-05-08T16:48:23.476Z\",\n    \"updatedAt\": \"2025-05-08T17:28:14.879Z\",\n    \"id\": 40\n}"
						}
					]
				},
				{
					"name": "Partially update a user",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating a random last name for the user.\r",
									"function generateLastName() {\r",
									"    const randomNumber = Math.floor(Math.random() * 10000);\r",
									"    return `Fahmy-${randomNumber}`;\r",
									"}\r",
									"pm.collectionVariables.set('lastName',generateLastName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"firstName\": { \"type\": \"string\" },\r",
									"    \"lastName\": { \"type\": \"string\" },\r",
									"    \"email\": { \"type\": \"string\" },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"firstName\", \"lastName\", \"email\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedLastName = pm.collectionVariables.get('lastName');\r",
									"\r",
									"//Check the value of last name is updated correctly\r",
									"pm.test(\"Check the last name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(expectedLastName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"lastName\": \"{{lastName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This endpoint allows you to partially update a user’s details.\n\n**Request**  \n  \nMethod: `PATCH`  \n  \nURL: `http://localhost:3000/users/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `firstName` (string, optional)\n    \n- `lastName` (string, optional)\n    \n- `email` (string, optional)\n    \n\n**Response**  \n  \nUpon successful partial update, the response will include the updated user details.EndFragment"
					},
					"response": [
						{
							"name": "Partially update a user",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"lastName\": \"Fahmy-6754\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/users/40",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"40"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "202"
								},
								{
									"key": "ETag",
									"value": "W/\"ca-FOswuaFR2oWKtbbV+ozUuw5THa8\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:31:59 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Abdelrahman-9784\",\n    \"lastName\": \"Fahmy-6754\",\n    \"email\": \"Abdelrahman911@gmail.com\",\n    \"createdAt\": \"2025-05-08T16:48:23.476Z\",\n    \"updatedAt\": \"2025-05-08T17:28:14.879Z\",\n    \"id\": 40\n}"
						}
					]
				},
				{
					"name": "Retrieve partially updated user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedLastName = pm.collectionVariables.get('lastName');\r",
									"\r",
									"//Check the value of last name is updated correctly\r",
									"pm.test(\"Check the last name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.lastName).to.eql(expectedLastName);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a user after a partial update.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/users/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful retrieval, the response will include the updated user details."
					},
					"response": [
						{
							"name": "Retrieve partially updated user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/users/40",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"40"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "202"
								},
								{
									"key": "ETag",
									"value": "W/\"ca-FOswuaFR2oWKtbbV+ozUuw5THa8\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:33:51 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"firstName\": \"Abdelrahman-9784\",\n    \"lastName\": \"Fahmy-6754\",\n    \"email\": \"Abdelrahman911@gmail.com\",\n    \"createdAt\": \"2025-05-08T16:48:23.476Z\",\n    \"updatedAt\": \"2025-05-08T17:28:14.879Z\",\n    \"id\": 40\n}"
						}
					]
				},
				{
					"name": "Delete a user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This endpoint allows you to delete a user by ID.\n\n**Request**  \n  \nMethod: `DELETE`  \n  \nURL: `http://localhost:3000/users/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful deletion, the response will return an empty body with no content."
					},
					"response": [
						{
							"name": "Delete a user",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/users/40",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"40"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:34:55 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Retrieve deleted user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Check the message in the response body.\r",
									"pm.test(\"Check the message in the response body\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"User not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/{{userId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"users",
								"{{userId}}"
							]
						},
						"description": "This endpoint allows you to attempt retrieving a user after they have been deleted.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/users/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nIf the user has been deleted, the response will return a message indicating that the user was not found."
					},
					"response": [
						{
							"name": "Retrieve deleted user",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/users/40",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"users",
										"40"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "33"
								},
								{
									"key": "ETag",
									"value": "W/\"21-ZGVnntUV23OO3IYyawjFZsL32fI\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:36:28 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"User not found\"\n}"
						}
					]
				}
			],
			"description": "> **This folder contains requests to manage users, including adding, updating, finding, and deleting users.**"
		},
		{
			"name": "Wishlists",
			"item": [
				{
					"name": "Create a new book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Setting the value of book id to a collection variable\r",
									"pm.collectionVariables.set('bookId', jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating Book Title\r",
									"function generateBookTitle() {\r",
									"  const adjectives = [\"Hidden\", \"Lost\", \"Mysterious\", \"Brave\", \"Silent\", \"Shattered\", \"Whispering\"];\r",
									"  const subjects = [\"Journey\", \"Secret\", \"Legend\", \"Dream\", \"Memory\", \"Promise\", \"Shadow\"];\r",
									"  const themes = [\"of the Night\", \"in the Storm\", \"Beyond the Stars\", \"Under the Moon\", \"from the Past\", \"Within the Flames\", \"Across the Sea\"];\r",
									"\r",
									"  const adj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"  const subj = subjects[Math.floor(Math.random() * subjects.length)];\r",
									"  const theme = themes[Math.floor(Math.random() * themes.length)];\r",
									"\r",
									"  const year = Math.floor(Math.random() * (2025 - 1900 + 1)) + 1900;\r",
									"\r",
									"  return `${adj} ${subj} ${theme} (${year})`;\r",
									"}\r",
									"pm.collectionVariables.set('title',generateBookTitle());\r",
									"\r",
									"//Generating Author Name\r",
									"function generateAuthorName() {\r",
									"  const firstNames = [\"Abdelrahma\", \"James\", \"Lina\", \"Omar\", \"Sophie\", \"Raj\", \"Fatima\", \"Marco\", \"Yuki\"];\r",
									"  const lastNames = [\"Fahmy\", \"Morgan\", \"Chen\", \"Patel\", \"Hassan\", \"Rossi\", \"Brown\", \"Tanaka\", \"Khalil\"];\r",
									"\r",
									"  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"\r",
									"  return `${firstName} ${lastName}`;\r",
									"}\r",
									"pm.collectionVariables.set('author',generateAuthorName());\r",
									"\r",
									"//Generating ISBN Number\r",
									"function generateIsbnNumber() {\r",
									"  return (Math.floor(Math.random() * 1000000) + 1).toString();\r",
									"}\r",
									"pm.collectionVariables.set('isbn',generateIsbnNumber());\r",
									"\r",
									"//Generating Release Date\r",
									"function generateReleaseDate() {\r",
									"  const startDate = new Date(1900, 0, 1); // January 1, 1900\r",
									"  const endDate = new Date(2025, 4, 5); // May 5, 2025\r",
									"\r",
									"  // Generate a random timestamp between the start and end date\r",
									"  const randomTimestamp = startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime());\r",
									"\r",
									"  // Convert the random timestamp back to a date\r",
									"  const randomDate = new Date(randomTimestamp);\r",
									"\r",
									"  // Format the date as dd-mm-yyyy\r",
									"  const day = String(randomDate.getDate()).padStart(2, '0');\r",
									"  const month = String(randomDate.getMonth() + 1).padStart(2, '0');\r",
									"  const year = randomDate.getFullYear();\r",
									"\r",
									"  return `${day}-${month}-${year}`;\r",
									"}\r",
									"pm.collectionVariables.set('releaseDate',generateReleaseDate());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"author\": \"{{author}}\",\r\n    \"isbn\": \"{{isbn}}\",\r\n    \"releaseDate\": \"{{releaseDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						},
						"description": "This endpoint allows you to add a new book to the system.\n\n**Request**\n\nMethod: `POST`\n\nURL: `http://localhost:3000/books`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `title` (string, required): The title of the book.\n    \n- `author` (string, required): The author of the book.\n    \n- `isbn` (string, required): The ISBN number of the book.\n    \n- `releaseDate` (string, required): The release date of the book.\n    \n\n**Response**\n\nUpon successful creation, the response will include the details of the newly added book, including its title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Create a new book",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Shattered Secret from the Past (1935)\",\r\n    \"author\": \"Fatima Tanaka\",\r\n    \"isbn\": \"24830\",\r\n    \"releaseDate\": \"16-02-2019\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "231"
								},
								{
									"key": "ETag",
									"value": "W/\"e7-ggV8W7xvWcVjQ11KiUvDQK8ewmA\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:37:48 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Shattered Secret from the Past (1935)\",\n    \"author\": \"Fatima Tanaka\",\n    \"isbn\": \"24830\",\n    \"releaseDate\": \"16-02-2019\",\n    \"createdAt\": \"2025-05-08T17:37:48.452Z\",\n    \"updatedAt\": \"2025-05-08T17:37:48.452Z\",\n    \"id\": 48\n}"
						}
					]
				},
				{
					"name": "Create a new wishlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomWishlistName() {\r",
									"    const names = [\"Abdelrahman\", \"Emma\", \"John\", \"Sophia\", \"Liam\", \"Olivia\", \"Noah\", \"Ava\"];\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
									"    return `${randomName}'s List`;\r",
									"}\r",
									"pm.collectionVariables.set('wishlistName',generateRandomWishlistName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"books\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": { \"type\": \"integer\" }\r",
									"    },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"books\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedWishlistName = pm.collectionVariables.get('wishlistName');\r",
									"var expectedBookId = pm.collectionVariables.get('bookId');\r",
									"\r",
									"//Check the value of wishlist name is correct\r",
									"pm.test(\"Check the wishlist name is correct\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedWishlistName);\r",
									"});\r",
									"\r",
									"//Check the value of book ids in the wishlist are correct\r",
									"pm.test(\"Check the book ids in the wishlist are correct\", function () {\r",
									"    pm.expect(jsonData.books[0]).to.eql(expectedBookId);\r",
									"});\r",
									"\r",
									"//Setting the value of wishlist id to a collection variable\r",
									"pm.collectionVariables.set('wishlistId', jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"name\": \"{{wishlistName}}\", \r\n    \"books\": [{{bookId}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/wishlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists"
							]
						},
						"description": "This endpoint allows you to add a new wishlist to the system.\n\n**Request**\n\nMethod: `POST`\n\nURL: `http://localhost:3000/wishlists`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `name` (string, required): The name of the wishlist.\n    \n- `books` (array of numbers, required): A list of book IDs to be included in the wishlist.\n    \n\n**Response**\n\nUpon successful creation, the response will include the details of the newly added wishlist, including its name, books, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Create a new wishlist",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n    \"name\": \"Sophia's List\",\r\n    \"books\": [\r\n        48\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/wishlists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "152"
								},
								{
									"key": "ETag",
									"value": "W/\"98-piFdQEKa1lztf7TjO1hz7BJaYGo\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:41:03 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Sophia's List\",\n    \"books\": [\n        48\n    ],\n    \"createdAt\": \"2025-05-08T17:41:03.450Z\",\n    \"updatedAt\": \"2025-05-08T17:41:03.450Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "Retrieve all wishlists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedWishlistName = pm.collectionVariables.get('wishlistName');\r",
									"var expectedBookId = pm.collectionVariables.get('bookId');\r",
									"var wishlistId = pm.collectionVariables.get('wishlistId');\r",
									"\r",
									"//Finding the added wishlist between the wishlists.\r",
									"const wishlist = jsonData.find(w => w.id === wishlistId)\r",
									"\r",
									"//Checking the schema of the wishlist.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"books\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": { \"type\": \"integer\" }\r",
									"    },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"books\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.expect(wishlist).to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Check the value of wishlist name is correct\r",
									"pm.test(\"Check the wishlist name is correct\", function () {\r",
									"    pm.expect(wishlist.name).to.eql(expectedWishlistName);\r",
									"});\r",
									"\r",
									"//Check the value of book ids in the wishlist are correct\r",
									"pm.test(\"Check the book ids in the wishlist are correct\", function () {\r",
									"    pm.expect(wishlist.books[0]).to.eql(expectedBookId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/wishlists",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists"
							]
						},
						"description": "This endpoint allows you to retrieve a list of all wishlists in the system.\n\n**Request**\n\nMethod: `GET`\n\nURL: `http://localhost:3000/wishlists`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include an array of wishlists details."
					},
					"response": [
						{
							"name": "Retrieve all wishlists",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/wishlists",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "ETag",
									"value": "W/\"f11-UBBIa3tbSv6g7dpP2q+3BzOL7fw\""
								},
								{
									"key": "Content-Encoding",
									"value": "gzip"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:44:58 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								},
								{
									"key": "Transfer-Encoding",
									"value": "chunked"
								}
							],
							"cookie": [],
							"body": "[\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 1\n    },\n    {\n        \"name\": \"Chocolate Chip's List\",\n        \"books\": [\n            2\n        ],\n        \"id\": 2\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 3\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 4\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 5\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 6\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 7\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            2\n        ],\n        \"id\": 8\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 9\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 10\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [],\n        \"id\": 11\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 12\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 13\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 14\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [],\n        \"id\": 15\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 16\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 17\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            27\n        ],\n        \"id\": 18\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [\n            6\n        ],\n        \"id\": 19\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 20\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            10\n        ],\n        \"id\": 21\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 22\n    },\n    {\n        \"name\": \"Charles's List\",\n        \"books\": [],\n        \"id\": 23\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            27\n        ],\n        \"id\": 24\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 25\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            9\n        ],\n        \"id\": 26\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [\n            1\n        ],\n        \"id\": 27\n    },\n    {\n        \"name\": \"Jonathan's List\",\n        \"books\": [],\n        \"id\": 28\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [\n            13,\n            25,\n            7\n        ],\n        \"id\": 29\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            13\n        ],\n        \"id\": 30\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            23,\n            5,\n            8\n        ],\n        \"id\": 31\n    },\n    {\n        \"name\": \"C.S.'s List\",\n        \"books\": [\n            16\n        ],\n        \"id\": 32\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 33\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 34\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 35\n    },\n    {\n        \"name\": \"Nate's List\",\n        \"books\": [],\n        \"id\": 36\n    },\n    {\n        \"name\": \"Wishlist Name4546\",\n        \"books\": [\n            1212351565\n        ],\n        \"createdAt\": \"2025-05-06T12:56:52.834Z\",\n        \"updatedAt\": \"2025-05-06T12:56:52.834Z\",\n        \"id\": 37\n    },\n    {\n        \"name\": \"Emma's List\",\n        \"books\": [\n            40\n        ],\n        \"createdAt\": \"2025-05-06T13:05:49.229Z\",\n        \"updatedAt\": \"2025-05-06T13:05:49.229Z\",\n        \"id\": 38\n    },\n    {\n        \"name\": \"Olivia's List\",\n        \"books\": [\n            40\n        ],\n        \"createdAt\": \"2025-05-06T13:10:58.874Z\",\n        \"updatedAt\": \"2025-05-06T13:10:58.874Z\",\n        \"id\": 39\n    },\n    {\n        \"name\": \"Emma's List\",\n        \"books\": [\n            40\n        ],\n        \"createdAt\": \"2025-05-06T13:12:55.479Z\",\n        \"updatedAt\": \"2025-05-06T13:12:55.479Z\",\n        \"id\": 40\n    },\n    {\n        \"name\": \"Abdelrahman's List\",\n        \"books\": [\n            40\n        ],\n        \"createdAt\": \"2025-05-06T13:14:15.870Z\",\n        \"updatedAt\": \"2025-05-06T13:14:15.870Z\",\n        \"id\": 41\n    },\n    {\n        \"name\": \"Emma's List\",\n        \"books\": [\n            43\n        ],\n        \"createdAt\": \"2025-05-06T13:51:59.901Z\",\n        \"updatedAt\": \"2025-05-06T13:56:57.887Z\",\n        \"id\": 42\n    },\n    {\n        \"name\": \"Sophia's List\",\n        \"books\": [\n            48\n        ],\n        \"createdAt\": \"2025-05-08T17:41:03.450Z\",\n        \"updatedAt\": \"2025-05-08T17:41:03.450Z\",\n        \"id\": 43\n    }\n]"
						}
					]
				},
				{
					"name": "Retrieve a wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the wishlist.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"books\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": { \"type\": \"integer\" }\r",
									"    },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"books\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedWishlistName = pm.collectionVariables.get('wishlistName');\r",
									"var expectedBookId = pm.collectionVariables.get('bookId');\r",
									"\r",
									"//Check the value of wishlist name is correct\r",
									"pm.test(\"Check the wishlist name is correct\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedWishlistName);\r",
									"});\r",
									"\r",
									"//Check the value of book ids in the wishlist are correct\r",
									"pm.test(\"Check the book ids in the wishlist are correct\", function () {\r",
									"    pm.expect(jsonData.books[0]).to.eql(expectedBookId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/wishlists/{{wishlistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists",
								"{{wishlistId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a specific wishlist by its ID.\n\n**Request**\n\nMethod: GET\n\nURL: `http://localhost:3000/wishlists/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include the details of the wishlist."
					},
					"response": [
						{
							"name": "Retrieve a wishlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/wishlists/43",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists",
										"43"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "152"
								},
								{
									"key": "ETag",
									"value": "W/\"98-piFdQEKa1lztf7TjO1hz7BJaYGo\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:48:25 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Sophia's List\",\n    \"books\": [\n        48\n    ],\n    \"createdAt\": \"2025-05-08T17:41:03.450Z\",\n    \"updatedAt\": \"2025-05-08T17:41:03.450Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "Create a new book",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Response body\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Setting the value of book id to a collection variable\r",
									"pm.collectionVariables.set('bookId', jsonData.id);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"//Generating Book Title\r",
									"function generateBookTitle() {\r",
									"  const adjectives = [\"Hidden\", \"Lost\", \"Mysterious\", \"Brave\", \"Silent\", \"Shattered\", \"Whispering\"];\r",
									"  const subjects = [\"Journey\", \"Secret\", \"Legend\", \"Dream\", \"Memory\", \"Promise\", \"Shadow\"];\r",
									"  const themes = [\"of the Night\", \"in the Storm\", \"Beyond the Stars\", \"Under the Moon\", \"from the Past\", \"Within the Flames\", \"Across the Sea\"];\r",
									"\r",
									"  const adj = adjectives[Math.floor(Math.random() * adjectives.length)];\r",
									"  const subj = subjects[Math.floor(Math.random() * subjects.length)];\r",
									"  const theme = themes[Math.floor(Math.random() * themes.length)];\r",
									"\r",
									"  const year = Math.floor(Math.random() * (2025 - 1900 + 1)) + 1900;\r",
									"\r",
									"  return `${adj} ${subj} ${theme} (${year})`;\r",
									"}\r",
									"pm.collectionVariables.set('title',generateBookTitle());\r",
									"\r",
									"//Generating Author Name\r",
									"function generateAuthorName() {\r",
									"  const firstNames = [\"Abdelrahma\", \"James\", \"Lina\", \"Omar\", \"Sophie\", \"Raj\", \"Fatima\", \"Marco\", \"Yuki\"];\r",
									"  const lastNames = [\"Fahmy\", \"Morgan\", \"Chen\", \"Patel\", \"Hassan\", \"Rossi\", \"Brown\", \"Tanaka\", \"Khalil\"];\r",
									"\r",
									"  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];\r",
									"  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];\r",
									"\r",
									"  return `${firstName} ${lastName}`;\r",
									"}\r",
									"pm.collectionVariables.set('author',generateAuthorName());\r",
									"\r",
									"//Generating ISBN Number\r",
									"function generateIsbnNumber() {\r",
									"  return (Math.floor(Math.random() * 1000000) + 1).toString();\r",
									"}\r",
									"pm.collectionVariables.set('isbn',generateIsbnNumber());\r",
									"\r",
									"//Generating Release Date\r",
									"function generateReleaseDate() {\r",
									"  const startDate = new Date(1900, 0, 1); // January 1, 1900\r",
									"  const endDate = new Date(2025, 4, 5); // May 5, 2025\r",
									"\r",
									"  // Generate a random timestamp between the start and end date\r",
									"  const randomTimestamp = startDate.getTime() + Math.random() * (endDate.getTime() - startDate.getTime());\r",
									"\r",
									"  // Convert the random timestamp back to a date\r",
									"  const randomDate = new Date(randomTimestamp);\r",
									"\r",
									"  // Format the date as dd-mm-yyyy\r",
									"  const day = String(randomDate.getDate()).padStart(2, '0');\r",
									"  const month = String(randomDate.getMonth() + 1).padStart(2, '0');\r",
									"  const year = randomDate.getFullYear();\r",
									"\r",
									"  return `${day}-${month}-${year}`;\r",
									"}\r",
									"pm.collectionVariables.set('releaseDate',generateReleaseDate());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"{{title}}\",\r\n    \"author\": \"{{author}}\",\r\n    \"isbn\": \"{{isbn}}\",\r\n    \"releaseDate\": \"{{releaseDate}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/books",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"books"
							]
						},
						"description": "This endpoint allows you to add a new book to the system.\n\n**Request**\n\nMethod: `POST`\n\nURL: `http://localhost:3000/books`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `title` (string, required): The title of the book.\n    \n- `author` (string, required): The author of the book.\n    \n- `isbn` (string, required): The ISBN number of the book.\n    \n- `releaseDate` (string, required): The release date of the book.\n    \n\n**Response**\n\nUpon successful creation, the response will include the details of the newly added book, including its title, author, ISBN, release date, and timestamps for creation and update."
					},
					"response": [
						{
							"name": "Create a new book",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"Lost Secret Under the Moon (1918)\",\r\n    \"author\": \"Omar Hassan\",\r\n    \"isbn\": \"43894\",\r\n    \"releaseDate\": \"24-04-1955\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/books",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"books"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "225"
								},
								{
									"key": "ETag",
									"value": "W/\"e1-FALg2PsaA5+H4ytAH+7YGsqoF5o\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:50:20 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Lost Secret Under the Moon (1918)\",\n    \"author\": \"Omar Hassan\",\n    \"isbn\": \"43894\",\n    \"releaseDate\": \"24-04-1955\",\n    \"createdAt\": \"2025-05-08T17:50:20.483Z\",\n    \"updatedAt\": \"2025-05-08T17:50:20.483Z\",\n    \"id\": 49\n}"
						}
					]
				},
				{
					"name": "Update a wishlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomWishlistName() {\r",
									"    const names = [\"Abdelrahman\", \"Emma\", \"John\", \"Sophia\", \"Liam\", \"Olivia\", \"Noah\", \"Ava\"];\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)];\r",
									"    return `${randomName}'s List`;\r",
									"}\r",
									"pm.collectionVariables.set('wishlistName',generateRandomWishlistName());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"books\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": { \"type\": \"integer\" }\r",
									"    },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"books\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedWishlistName = pm.collectionVariables.get('wishlistName');\r",
									"var expectedBookId = pm.collectionVariables.get('bookId');\r",
									"\r",
									"//Check the value of wishlist name is updated correctly\r",
									"pm.test(\"Check the wishlist name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedWishlistName);\r",
									"});\r",
									"\r",
									"//Check the value of book ids in the wishlist are updated correctly\r",
									"pm.test(\"Check the book ids in the wishlist are updated correctly\", function () {\r",
									"    pm.expect(jsonData.books[0]).to.eql(expectedBookId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"{{wishlistName}}\", \r\n    \"books\": [{{bookId}}]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/wishlists/{{wishlistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists",
								"{{wishlistId}}"
							]
						},
						"description": "This endpoint allows you to update an existing wishlist’s details.\n\n**Request**\n\nMethod: `PUT`\n\nURL: `http://localhost:3000/wishlists/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `name` (string, required): The name of the wishlist.\n    \n- `books` (array of numbers, required): A list of book IDs to be included in the wishlist.\n    \n\n**Response**\n\nUpon successful update, the response will include the updated wishlist details."
					},
					"response": [
						{
							"name": "Update a wishlist",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"Ava's List\",\r\n    \"books\": [\r\n        49\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/wishlists/43",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists",
										"43"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "149"
								},
								{
									"key": "ETag",
									"value": "W/\"95-B+nj7oYjRUB7eE2zXha6Fs4BfsQ\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:51:19 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Ava's List\",\n    \"books\": [\n        49\n    ],\n    \"createdAt\": \"2025-05-08T17:41:03.450Z\",\n    \"updatedAt\": \"2025-05-08T17:51:19.327Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "Retrieve updated wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Expected Variables\r",
									"var jsonData = pm.response.json();\r",
									"var expectedWishlistName = pm.collectionVariables.get('wishlistName');\r",
									"var expectedBookId = pm.collectionVariables.get('bookId');\r",
									"\r",
									"//Check the value of wishlist name is updated correctly\r",
									"pm.test(\"Check the wishlist name is updated correctly\", function () {\r",
									"    pm.expect(jsonData.name).to.eql(expectedWishlistName);\r",
									"});\r",
									"\r",
									"//Check the value of book ids in the wishlist are updated correctly\r",
									"pm.test(\"Check the book ids in the wishlist are updated correctly\", function () {\r",
									"    pm.expect(jsonData.books[0]).to.eql(expectedBookId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/wishlists/{{wishlistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists",
								"{{wishlistId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of an updated wishlist.\n\n**Request**\n\nMethod: `GET`\n\nURL: `http://localhost:3000/wishlists/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include the updated details of the wishlist."
					},
					"response": [
						{
							"name": "Retrieve updated wishlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/wishlists/43",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists",
										"43"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "149"
								},
								{
									"key": "ETag",
									"value": "W/\"95-B+nj7oYjRUB7eE2zXha6Fs4BfsQ\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:55:23 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Ava's List\",\n    \"books\": [\n        49\n    ],\n    \"createdAt\": \"2025-05-08T17:41:03.450Z\",\n    \"updatedAt\": \"2025-05-08T17:51:19.327Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "Partially update a wishlist",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Checking the schema of the response.\r",
									"pm.test(\"Check the schema of the response\", function () {\r",
									"  const schema = {\r",
									"  \"type\": \"object\",\r",
									"  \"properties\": {\r",
									"    \"name\": { \"type\": \"string\" },\r",
									"    \"books\": {\r",
									"      \"type\": \"array\",\r",
									"      \"items\": { \"type\": \"integer\" }\r",
									"    },\r",
									"    \"createdAt\": { \"type\": \"string\" },\r",
									"    \"updatedAt\": { \"type\": \"string\" },\r",
									"    \"id\": { \"type\": \"integer\" }\r",
									"  },\r",
									"  \"required\": [\"name\", \"books\", \"createdAt\", \"updatedAt\", \"id\"]\r",
									"  };\r",
									"  pm.response.to.have.jsonSchema(schema);\r",
									"});\r",
									"\r",
									"//Check the wishlist books are updated correctly.\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check the wishlist books are updated correctly\", function () {\r",
									"    pm.expect(jsonData.books).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"books\": []\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/wishlists/{{wishlistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists",
								"{{wishlistId}}"
							]
						},
						"description": "This endpoint allows you to partially update specific fields of a wishlist.\n\n**Request**\n\nMethod: `PATCH`\n\nURL: `http://localhost:3000/wishlists/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Request Body:**\n\n- `name` (string, optional)\n    \n- `books` (array of numbers, optional)\n    \n\n**Response**\n\nUpon successful partial update, the response will include the updated wishlist details."
					},
					"response": [
						{
							"name": "Partially update a wishlist",
							"originalRequest": {
								"method": "PATCH",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"books\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://localhost:3000/wishlists/43",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists",
										"43"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "139"
								},
								{
									"key": "ETag",
									"value": "W/\"8b-unzRloMsXYyH9CHoHTSKdGiPlRI\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:56:38 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Ava's List\",\n    \"books\": [],\n    \"createdAt\": \"2025-05-08T17:41:03.450Z\",\n    \"updatedAt\": \"2025-05-08T17:51:19.327Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "Retrieve partially updated wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Check the wishlist books are updated correctly.\r",
									"var jsonData = pm.response.json();\r",
									"pm.test(\"Check the wishlist books are updated correctly\", function () {\r",
									"    pm.expect(jsonData.books).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/wishlists/{{wishlistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists",
								"{{wishlistId}}"
							]
						},
						"description": "This endpoint allows you to retrieve the details of a wishlist after it has been partially updated.\n\n**Request**\n\nMethod: `GET`\n\nURL: `http://localhost:3000/wishlists/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**\n\nUpon successful retrieval, the response will include the updated details of the wishlist."
					},
					"response": [
						{
							"name": "Retrieve partially updated wishlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/wishlists/43",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists",
										"43"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "139"
								},
								{
									"key": "ETag",
									"value": "W/\"8b-unzRloMsXYyH9CHoHTSKdGiPlRI\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:58:18 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"name\": \"Ava's List\",\n    \"books\": [],\n    \"createdAt\": \"2025-05-08T17:41:03.450Z\",\n    \"updatedAt\": \"2025-05-08T17:51:19.327Z\",\n    \"id\": 43\n}"
						}
					]
				},
				{
					"name": "Delete a wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{username}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/wishlists/{{wishlistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists",
								"{{wishlistId}}"
							]
						},
						"description": "This endpoint allows you to delete a wishlist by its ID.\n\n**Request**  \n  \nMethod: `DELETE`  \n  \nURL: `http://localhost:3000/wishlists/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nUpon successful deletion, the response will return an empty body with no content."
					},
					"response": [
						{
							"name": "Delete a wishlist",
							"originalRequest": {
								"method": "DELETE",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/wishlists/43",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists",
										"43"
									]
								}
							},
							"status": "No Content",
							"code": 204,
							"_postman_previewlanguage": "plain",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 17:59:44 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": null
						}
					]
				},
				{
					"name": "Retrieve deleted wishlist",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Checking the status code of the response.\r",
									"pm.test(\"Check the status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});\r",
									"\r",
									"//Checking the response time of the response.\r",
									"pm.test(\"Check the response time is less than 3000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
									"});\r",
									"\r",
									"//Check the message in the response body.\r",
									"pm.test(\"Check the message in the response body\", function () {\r",
									"    pm.expect(pm.response.json().message).to.eql(\"Wishlist not found\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "g-token",
								"value": "ROM831ESV",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/wishlists/{{wishlistId}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"wishlists",
								"{{wishlistId}}"
							]
						},
						"description": "This endpoint allows you to attempt retrieving a wishlist after it has been deleted.\n\n**Request**  \n  \nMethod: `GET`  \n  \nURL: `http://localhost:3000/wishlists/{id}`\n\n**Request Headers:**\n\n- `g-token` (string, required): The authorization token needed to authenticate the request.\n    \n\n**Response**  \n  \nIf the wishlist has been deleted, the response will return a message indicating that the wishlist was not found."
					},
					"response": [
						{
							"name": "Retrieve deleted wishlist",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "g-token",
										"value": "ROM831ESV",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://localhost:3000/wishlists/43",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"wishlists",
										"43"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "X-Powered-By",
									"value": "Express"
								},
								{
									"key": "Vary",
									"value": "Origin, Accept-Encoding"
								},
								{
									"key": "Access-Control-Allow-Credentials",
									"value": "true"
								},
								{
									"key": "Cache-Control",
									"value": "no-cache"
								},
								{
									"key": "Pragma",
									"value": "no-cache"
								},
								{
									"key": "Expires",
									"value": "-1"
								},
								{
									"key": "Content-Type",
									"value": "application/json; charset=utf-8"
								},
								{
									"key": "Content-Length",
									"value": "37"
								},
								{
									"key": "ETag",
									"value": "W/\"25-vKPJ6piY9SvfRkJ/XHxwKNESMOw\""
								},
								{
									"key": "Date",
									"value": "Thu, 08 May 2025 18:00:43 GMT"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Keep-Alive",
									"value": "timeout=5"
								}
							],
							"cookie": [],
							"body": "{\n    \"message\": \"Wishlist not found\"\n}"
						}
					]
				}
			],
			"description": "> **This folder contains requests to manage wishlists, including adding, updating, finding, and deleting wishlist items.**"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "title",
			"value": "Mysterious Secret Under the Moon (1902)"
		},
		{
			"key": "author",
			"value": "Lina Rossi"
		},
		{
			"key": "isbn",
			"value": "680752"
		},
		{
			"key": "releaseDate",
			"value": "04-04-1988"
		},
		{
			"key": "bookId",
			"value": 51
		},
		{
			"key": "householdName",
			"value": "Cozy Brown Household"
		},
		{
			"key": "householdId",
			"value": 22
		},
		{
			"key": "firstName",
			"value": "Abdelrahman-115"
		},
		{
			"key": "lastName",
			"value": "Fahmy-9860"
		},
		{
			"key": "email",
			"value": "Abdelrahman218@gmail.com"
		},
		{
			"key": "userId",
			"value": 40
		},
		{
			"key": "wishlistName",
			"value": "Abdelrahman's List"
		},
		{
			"key": "wishlistId",
			"value": 43
		}
	]
}